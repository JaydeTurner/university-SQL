

-- --------------------------------------------- --
-- ----------------Jayde Turner----------------- --
-- ------------------CMPJTUR1------------------- --
-- ------------Student No: 847729--------------- --
-- --------------------------------------------- --

DROP PROCEDURE IF EXISTS schedule_course;

DROP TRIGGER IF EXISTS grade_audit;
DROP TRIGGER IF EXISTS datacheck;

DROP VIEW IF EXISTS future_sessions;

DROP TABLE IF EXISTS grade_audit;
DROP TABLE IF EXISTS take;
DROP TABLE IF EXISTS `session`;
DROP TABLE IF EXISTS module;
DROP TABLE IF EXISTS delegate;
DROP TABLE IF EXISTS course;

/*
Dev environment calls above. The final product would not include these
This ensures during the prototyping I have a smoother workflow by
not having to manually drop each table whenever I make a change.
The order they are in is important. I have dropped the table in
reverse order of their definition to cause no dependancy errors.
*/

CREATE TABLE course (
    `code` CHAR(3) NOT NULL,
    `name` VARCHAR(30) NOT NULL,
    credits TINYINT NOT NULL,
    CONSTRAINT pri_course PRIMARY KEY (`code`)
);

CREATE TABLE module (
    `code` CHAR(2) NOT NULL,
    `name` VARCHAR(30) NOT NULL,
    cost DECIMAL(8 , 2 ) NOT NULL,
    credits TINYINT NOT NULL,
    course_code CHAR(3) NOT NULL,
    CONSTRAINT pri_module PRIMARY KEY (`code`),
    CONSTRAINT for_module FOREIGN KEY (course_code)
        REFERENCES course (`code`)
);

CREATE TABLE `session` (
    `code` CHAR(2) NOT NULL,
    `date` DATE NOT NULL,
    room VARCHAR(30) NULL,
    CONSTRAINT pri_session PRIMARY KEY (`code` , `date`),
    CONSTRAINT for_session FOREIGN KEY (`code`)
        REFERENCES module (`code`)
);

CREATE TABLE delegate (
    `no` INT NOT NULL,
    `name` VARCHAR(30) NOT NULL,
    phone VARCHAR(30) NULL,
    CONSTRAINT pri_delegate PRIMARY KEY (`no`)
);

CREATE TABLE take (
    `no` INT NOT NULL,
    `code` CHAR(2) NOT NULL,
    grade TINYINT NOT NULL,
    CONSTRAINT pri_take PRIMARY KEY (`code` , `no`),
    CONSTRAINT for_delegate FOREIGN KEY (`no`)
        REFERENCES delegate (`no`),
    CONSTRAINT for_take FOREIGN KEY (`code`)
        REFERENCES module (`code`)
);


-- Indexes to ensure that the respective values can be access fast when the 
-- database is full of data (10000 rows+)
CREATE INDEX in_take ON take (no, code);
CREATE INDEX in_take ON take (code, course_code);

/*Now the tables have been created, we move onto inserting our test data into the table.*/
 
/*-------------START OF TEST DATA INPUT-------------*/

/*Courses Data*/       

INSERT INTO course (`code`, `name`, credits)
  VALUES ('WSD', 'Web & Systems Development', 75);
INSERT INTO course (`code`, `name`, credits)
  VALUES ('DDM', 'Database Design & Management', 100);
INSERT INTO course (`code`, `name`, credits)
  VALUES ('NSF', 'Network Security & Forensics', 75);

/*Module Data*/
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('A2', 'ASP.NET', 250, 25, 'WSD');
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('A3', 'PHP', 250, 25, 'WSD');
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('A4', 'JavaFX', 350, 25, 'WSD');
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('B2', 'Oracle', 750, 50, 'DDM');
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('B3', 'SQLS', 750, 50, 'DDM');
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('C2', 'Law', 250, 25, 'NSF');
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('C3', 'Forensics', 350, 25, 'NSF');
INSERT INTO module (`code`, `name`, cost, credits, course_code)
  VALUES ('C4', 'Networks', 250, 25, 'NSF');

/*Session Data*/
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('A2', '2019-06-05', 305);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('A3', '2019-06-06', 307);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('A4', '2019-06-07', 305);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('B2', '2019-08-22', 208);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('B3', '2019-08-23', 208);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('A2', '2020-05-01', 303);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('A3', '2020-05-02', 305);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('A4', '2020-05-03', 303);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('B2', '2020-07-10', NULL);
INSERT INTO `session` (`code`, `date`, room)
  VALUES ('B3', '2020-07-11', NULL);

/*Delegate Data*/
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2001', 'Mike', NULL);
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2002', 'Andy', NULL);
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2003', 'Sarah', NULL);
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2004', 'Karen', NULL);
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2005', 'Lucy', NULL);
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2006', 'Steve', NULL);
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2007', 'Jenny', NULL);
INSERT INTO delegate (`no`, `name`, phone)
  VALUES ('2008', 'Tom', NULL);

/*Take Data*/
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2003', 'A2', 68);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2003', 'A3', 72);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2003', 'A4', 53);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2005', 'A2', 48);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2005', 'A3', 52);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2002', 'A2', 20);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2002', 'A3', 30);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2002', 'A4', 50);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2008', 'B2', 90);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2007', 'B2', 73);
INSERT INTO take (`no`, `code`, grade)
  VALUES ('2007', 'B3', 63);



/*-------------END OF TEST DATA INPUT-------------*/


/* -------START OF CREATE VIEW STATEMENT WITH TRIGGER----------*/

CREATE VIEW future_sessions AS
    SELECT `code`, `date`, room
    FROM `session` s
    WHERE s.`date` > (SELECT CURRENT_TIMESTAMP);
      WITH CHECK OPTION;


-- this trigger ensures that any data that could be displayed on our future sessions can not be a session in the past.
-- This is acheived by checking any insertion of new data on the session table will rejected if it is due to be in the past.
DELIMITER ££
CREATE TRIGGER datecheck BEFORE INSERT ON `session`
     FOR EACH ROW
       BEGIN
       IF NEW.`date` < (SELECT CURRENT_TIMESTAMP) THEN
         SIGNAL SQLSTATE '45000'
         SET MESSAGE_TEXT = "ERROR: You do not have the required privilages to time travel (You're trying to add a session in the past!)";
       END IF;
     END££
DELIMITER ;

/* -------END OF CREATE VIEW STATEMENTS----------*/

-- statement to test our trigger
/*
INSERT INTO `session`(`code`, `date`, room)
VALUES ('A4', '2009-05-10', null);
*/



/* -------CREATE sproc STATEMENTS----------*/
--                    --
-- PREFIX/SUFFIX DEF: --
-- t = Temporary. ie; Temporary controller t_controller
-- c = Cursor. ie;  | module cursor: module_c | cursor loop: c_loop

DELIMITER ££
CREATE PROCEDURE schedule_course (IN t_course_code CHAR(3), IN t_session_date DATE)
  BEGIN

  -- Setting up our data to use within the procedure. These should be prefixed with an @
  -- to keep them as local variables rather than gloabal for optimisation although
  -- I had problems getting this to work correctly.
    DECLARE t_controller BOOLEAN DEFAULT FALSE;
    DECLARE t_module_code CHAR(2) DEFAULT '';
    DECLARE module_c CURSOR FOR 
      (SELECT module.`code` FROM module WHERE module.course_code = t_course_code);
    DECLARE CONTINUE HANDLER FOR NOT FOUND
      SET t_controller = TRUE;


 -- Checking to see if the specified course exists in the data
  IF (SELECT NOT EXISTS (SELECT course_code FROM module m WHERE t_course_code = m.course_code)) THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = ' You are trying to handle a course that doesnt exists ya doofus!!';
    END IF;

-- Checking the date to ensure it follows the specified buissness rule : A course must be scheduled atleast 1 month in advance.
  IF (t_session_date < (DATE_ADD(NOW(), INTERVAL 1 MONTH)) ) THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = ' This course will start too soon (min 1 month in the future). Please pick a later date.';
    END IF;

-- Additional check to ensure the date selected doesnt start on a weekend and allow the user to see this problem.
  IF (DAYOFWEEK(t_session_date) = 1 OR DAYOFWEEK(t_session_date) = 7) THEN
    SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'You cannot start the schedule on a weekend, silly!';
  END IF;

-- Opening and using our previously declared cursor and iterating through its values
  OPEN module_c;
    c_loop: LOOP
      FETCH NEXT FROM module_c INTO t_module_code;

 -- End our loop once we reach the end of the results set.
    IF (t_controller=TRUE) THEN
      LEAVE c_loop;
    END IF;
      
      -- This ensures that the scheduled date will NOT fall on a weekend.
    IF (t_controller=FALSE) THEN
      IF (DAYOFWEEK(t_session_date) = 1) THEN
        SET t_session_date = DATE_ADD(t_session_date, INTERVAL 1 DAY);
      ELSE IF (DAYOFWEEK(t_session_date) = 7) THEN 
        SET t_session_date = DATE_ADD(t_session_date, INTERVAL 2 DAY);
      END IF;
   
   -- If the date is ok ie; not on a weekend, a month in advanced etc. then insert our new session   
  INSERT INTO `session` (`code`, `date`, room)
    VALUES (t_module_code, t_session_date, NULL);

-- Increase the held value for session date ready for our next iteration.
  SET t_session_date = DATE_ADD(t_session_date, INTERVAL 1 DAY);


      END IF;
    END IF;
  END LOOP;
 
  CLOSE module_c;
  END££
DELIMITER ;

/* -------END OF CREATE SPROC STATEMENTS----------*/

-- Testng our above SPROC
CALL schedule_course ('NSF', '2023.10.26');



/*--------------TRIGGER----------------------------*/

-- Here I am creating a new table within the database to keep track of any changes made to any grade.
-- This table will not have any relationships with our core tables.
CREATE TABLE grade_audit (
    `user` VARCHAR(60) NOT NULL,
    `date` DATE NOT NULL,
    `time` VARCHAR(8),
    `ip` VARCHAR(15) NOT NULL,
    `p_grade` TINYINT NOT NULL,
    `n_grade` TINYINT NULL,
    CONSTRAINT pri_grade_audit PRIMARY KEY (`user` , `date` , `p_grade`)
);
 

-- This trigger will be the only thing that will populate the audit table.
-- It inserts data into the table that will assist in any investigation as to
-- what may have happened during the running of the database. 
DELIMITER ££
CREATE TRIGGER audit_update
-- The key to this trigger is that it happens AFTER a change to the data has been made.
-- This means that the user who would have made the change would be unaware of this happening.
AFTER UPDATE
ON take 
FOR EACH ROW
BEGIN
    -- This is the data that we are looking to store on the user that has made the changes.
    -- It is imporant to capture a range of information from the user to provide robust evidence.
    -- New and old grade alone cannot tell us much. But combining this with the username of the account
    -- alongside the ip address of the current connection. This combined with the date and time can
    -- give us a good idea of exactly how the event happened.
    DECLARE cur_username varchar(60);
    DECLARE cur_date DATE;
    DECLARE cur_time VARCHAR(8);
    DECLARE cur_ip VARCHAR(15);
    DECLARE prev_grade TINYINT;
    DECLARE new_grade TINYINT;

    SET cur_username = CURRENT_USER;
    SET cur_date = CURRENT_TIMESTAMP;
    SET cur_time = CURTIME();
    SET cur_ip = (SELECT HOST FROM information_schema.PROCESSLIST WHERE ID=connection_id());
    SET prev_grade = OLD.grade;
    SET new_grade = NEW.grade;

    INSERT INTO grade_audit(`user`,`date`, `time`, `ip`, p_grade,n_grade)
        VALUES (cur_username,cur_date, cur_time, cur_ip, prev_grade,new_grade);
  SIGNAL SQLSTATE '45000' -- FOR DEBUGGING PURPOSES
        SET MESSAGE_TEXT = 'You hear mechanical noises from inside the database, although what you just done has been recorded...';
 END££
 DELIMITER ;

/*-----------END OF TRIGGER-------------*/

/*Query 1*/
SELECT DISTINCT `code`,
    `name`,
    credits
FROM module;


/*Query 2*/
SELECT DISTINCT `no`,
       `name`
FROM delegate
ORDER BY `name` DESC;


/*Query 3*/
SELECT DISTINCT `code`, 
       `name`,
        credits
FROM course AS network_courses
WHERE `name` LIKE ('Network%');

/*Query 4*/
SELECT DISTINCT `code`,
       grade AS 'top_marks'
FROM take t
WHERE t.grade = (SELECT MAX(grade) FROM take);

/*Query 5*/
SELECT DISTINCT `no`
FROM take t
WHERE t.grade = (SELECT MAX(grade) FROM take);

/*Query 6*/
SELECT DISTINCT take.`no`,
       (SELECT `name` FROM delegate d WHERE take.`no` = d.`no`) AS delegate_name 
FROM take 
WHERE take.grade = (SELECT MAX(grade) FROM take);

/*Query 7*/
SELECT DISTINCT `code`,
       `date`
FROM `session` s
WHERE (s.`date` BETWEEN CURDATE() AND DATE_ADD(CURDATE() INTERVAL 1 YEAR) AND room IS NULL);

/*Query 8*/
SELECT DISTINCT take.`no`,
       delegate.`name` AS delegate_name,
       module.`code`,
       module.`name` AS module_name
FROM take
INNER JOIN delegate ON take.`no` = delegate.`no`
INNER JOIN module ON take.`code` = module.`code`
WHERE take.grade < 40;

/*Query 9*/
SELECT DISTINCT take.`no`,
       delegate.`name`
FROM take
INNER JOIN delegate ON take.`no` = delegate.`no`
WHERE take.grade = (SELECT MAX(grade) FROM take);
 
/*Query 10*/
SELECT DISTINCT delegate.`no`,
    delegate.`name`,
    (SELECT module.credits FROM module WHERE module.`code` = take.`code` ) AS credits_earned,
    course.`code`,
    course.`name`,
    course.credits
FROM course
    INNER JOIN module ON course.`code` = module.`course_code`
    INNER JOIN take ON module.`code` = take.`code`
    INNER JOIN delegate ON take.`no` = delegate.`no`
    GROUP BY delegate.`no`, delegate.`name`, course.`code`;
    
-- I managed to solve query 11 before query 10. 

/*Query 11*/
SELECT DISTINCT delegate.`no`,
    delegate.`name`,
    (SELECT module.credits FROM module WHERE module.`code` = take.`code` ) AS credits_earned,
    course.`code`,
    course.`name`,
    course.credits
FROM course
    INNER JOIN module ON course.`code` = module.`course_code`
    INNER JOIN take ON module.`code` = take.`code`
    INNER JOIN delegate ON take.`no` = delegate.`no`
    GROUP BY delegate.`no`, delegate.`name`, course.`code`;
/* -------------  END OF QUERIES 1 - 11 ------------------ */
